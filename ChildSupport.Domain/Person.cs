//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.Specialized;

namespace ChildSupport.Domain
{    
    [Serializable()]
    public partial class Person
    {
        #region Primitive Properties
    
        public virtual int BusinessEntityID
        {
            get { return _businessEntityID; }
            set
            {
                if (_businessEntityID != value)
                {
                    if (BusinessEntity != null && BusinessEntity.BusinessEntityID != value)
                    {
                        BusinessEntity = null;
                    }
                    _businessEntityID = value;
                }
            }
        }
        private int _businessEntityID;
                
        public virtual string PersonType
        {
            get;
            set;
        }
                
        public virtual bool NameStyle
        {
            get;
            set;
        }
                
        public virtual string Title
        {
            get;
            set;
        }
                
        public virtual string FirstName
        {
            get;
            set;
        }
                
        public virtual string MiddleName
        {
            get;
            set;
        }

        public virtual string LastName
        {
            get;
            set;
        }

        public virtual string Suffix
        {
            get;
            set;
        }

        public string Email { get; set; }

        public virtual int EmailPromotion
        {
            get;
            set;
        }

        public virtual string AdditionalContactInfo
        {
            get;
            set;
        }

        public virtual string Demographics
        {
            get;
            set;
        }

        public virtual System.Guid rowguid
        {
            get;
            set;
        }

        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties

        public virtual Employee Employee
        {
            get { return _employee; }
            set
            {
                if (!ReferenceEquals(_employee, value))
                {
                    var previousValue = _employee;
                    _employee = value;
                    FixupEmployee(previousValue);
                }
            }
        }
        private Employee _employee;

        public virtual BusinessEntity BusinessEntity
        {
            get { return _businessEntity; }
            set
            {
                if (!ReferenceEquals(_businessEntity, value))
                {
                    var previousValue = _businessEntity;
                    _businessEntity = value;
                    FixupBusinessEntity(previousValue);
                }
            }
        }
        private BusinessEntity _businessEntity;

        public virtual ICollection<BusinessEntityContact> BusinessEntityContacts
        {
            get
            {
                if (_businessEntityContacts == null)
                {
                    var newCollection = new FixupCollection<BusinessEntityContact>();
                    newCollection.CollectionChanged += FixupBusinessEntityContacts;
                    _businessEntityContacts = newCollection;
                }
                return _businessEntityContacts;
            }
            set
            {
                if (!ReferenceEquals(_businessEntityContacts, value))
                {
                    var previousValue = _businessEntityContacts as FixupCollection<BusinessEntityContact>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBusinessEntityContacts;
                    }
                    _businessEntityContacts = value;
                    var newValue = value as FixupCollection<BusinessEntityContact>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBusinessEntityContacts;
                    }
                }
            }
        }
        private ICollection<BusinessEntityContact> _businessEntityContacts;
                
        public virtual ICollection<EmailAddress> EmailAddresses
        {
            get
            {
                if (_emailAddresses == null)
                {
                    var newCollection = new FixupCollection<EmailAddress>();
                    newCollection.CollectionChanged += FixupEmailAddresses;
                    _emailAddresses = newCollection;
                }
                return _emailAddresses;
            }
            set
            {
                if (!ReferenceEquals(_emailAddresses, value))
                {
                    var previousValue = _emailAddresses as FixupCollection<EmailAddress>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmailAddresses;
                    }
                    _emailAddresses = value;
                    var newValue = value as FixupCollection<EmailAddress>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmailAddresses;
                    }
                }
            }
        }
        private ICollection<EmailAddress> _emailAddresses;
                
        public virtual Password Password
        {
            get { return _password; }
            set
            {
                if (!ReferenceEquals(_password, value))
                {
                    var previousValue = _password;
                    _password = value;
                    FixupPassword(previousValue);
                }
            }
        }
        private Password _password;
                
        public virtual ICollection<Customer> Customers
        {
            get
            {
                if (_customers == null)
                {
                    var newCollection = new FixupCollection<Customer>();
                    newCollection.CollectionChanged += FixupCustomers;
                    _customers = newCollection;
                }
                return _customers;
            }
            set
            {
                if (!ReferenceEquals(_customers, value))
                {
                    var previousValue = _customers as FixupCollection<Customer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomers;
                    }
                    _customers = value;
                    var newValue = value as FixupCollection<Customer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomers;
                    }
                }
            }
        }
        private ICollection<Customer> _customers;
                
        public virtual ICollection<PersonCreditCard> PersonCreditCards
        {
            get
            {
                if (_personCreditCards == null)
                {
                    var newCollection = new FixupCollection<PersonCreditCard>();
                    newCollection.CollectionChanged += FixupPersonCreditCards;
                    _personCreditCards = newCollection;
                }
                return _personCreditCards;
            }
            set
            {
                if (!ReferenceEquals(_personCreditCards, value))
                {
                    var previousValue = _personCreditCards as FixupCollection<PersonCreditCard>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPersonCreditCards;
                    }
                    _personCreditCards = value;
                    var newValue = value as FixupCollection<PersonCreditCard>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPersonCreditCards;
                    }
                }
            }
        }
        private ICollection<PersonCreditCard> _personCreditCards;
               
        public virtual ICollection<PersonPhone> PersonPhones
        {
            get
            {
                if (_personPhones == null)
                {
                    var newCollection = new FixupCollection<PersonPhone>();
                    newCollection.CollectionChanged += FixupPersonPhones;
                    _personPhones = newCollection;
                }
                return _personPhones;
            }
            set
            {
                if (!ReferenceEquals(_personPhones, value))
                {
                    var previousValue = _personPhones as FixupCollection<PersonPhone>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPersonPhones;
                    }
                    _personPhones = value;
                    var newValue = value as FixupCollection<PersonPhone>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPersonPhones;
                    }
                }
            }
        }
        private ICollection<PersonPhone> _personPhones;

        #endregion
        #region Association Fixup
    
        private void FixupEmployee(Employee previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Person, this))
            {
                previousValue.Person = null;
            }
    
            if (Employee != null)
            {
                Employee.Person = this;
            }
        }
    
        private void FixupBusinessEntity(BusinessEntity previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Person, this))
            {
                previousValue.Person = null;
            }
    
            if (BusinessEntity != null)
            {
                BusinessEntity.Person = this;
                if (BusinessEntityID != BusinessEntity.BusinessEntityID)
                {
                    BusinessEntityID = BusinessEntity.BusinessEntityID;
                }
            }
        }
    
        private void FixupPassword(Password previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Person, this))
            {
                previousValue.Person = null;
            }
    
            if (Password != null)
            {
                Password.Person = this;
            }
        }
    
        private void FixupBusinessEntityContacts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (BusinessEntityContact item in e.NewItems)
                {
                    item.Person = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BusinessEntityContact item in e.OldItems)
                {
                    if (ReferenceEquals(item.Person, this))
                    {
                        item.Person = null;
                    }
                }
            }
        }
    
        private void FixupEmailAddresses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmailAddress item in e.NewItems)
                {
                    item.Person = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmailAddress item in e.OldItems)
                {
                    if (ReferenceEquals(item.Person, this))
                    {
                        item.Person = null;
                    }
                }
            }
        }
    
        private void FixupCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Customer item in e.NewItems)
                {
                    item.Person = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.Person, this))
                    {
                        item.Person = null;
                    }
                }
            }
        }
    
        private void FixupPersonCreditCards(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PersonCreditCard item in e.NewItems)
                {
                    item.Person = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PersonCreditCard item in e.OldItems)
                {
                    if (ReferenceEquals(item.Person, this))
                    {
                        item.Person = null;
                    }
                }
            }
        }
    
        private void FixupPersonPhones(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PersonPhone item in e.NewItems)
                {
                    item.Person = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PersonPhone item in e.OldItems)
                {
                    if (ReferenceEquals(item.Person, this))
                    {
                        item.Person = null;
                    }
                }
            }
        }

        #endregion
    }
}