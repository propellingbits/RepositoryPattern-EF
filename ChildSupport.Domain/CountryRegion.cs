//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ChildSupport.Domain
{
    public partial class CountryRegion
    {
        #region Primitive Properties
    
        public virtual string CountryRegionCode
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<CountryRegionCurrency> CountryRegionCurrencies
        {
            get
            {
                if (_countryRegionCurrencies == null)
                {
                    var newCollection = new FixupCollection<CountryRegionCurrency>();
                    newCollection.CollectionChanged += FixupCountryRegionCurrencies;
                    _countryRegionCurrencies = newCollection;
                }
                return _countryRegionCurrencies;
            }
            set
            {
                if (!ReferenceEquals(_countryRegionCurrencies, value))
                {
                    var previousValue = _countryRegionCurrencies as FixupCollection<CountryRegionCurrency>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCountryRegionCurrencies;
                    }
                    _countryRegionCurrencies = value;
                    var newValue = value as FixupCollection<CountryRegionCurrency>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCountryRegionCurrencies;
                    }
                }
            }
        }
        private ICollection<CountryRegionCurrency> _countryRegionCurrencies;
    
        public virtual ICollection<SalesTerritory> SalesTerritories
        {
            get
            {
                if (_salesTerritories == null)
                {
                    var newCollection = new FixupCollection<SalesTerritory>();
                    newCollection.CollectionChanged += FixupSalesTerritories;
                    _salesTerritories = newCollection;
                }
                return _salesTerritories;
            }
            set
            {
                if (!ReferenceEquals(_salesTerritories, value))
                {
                    var previousValue = _salesTerritories as FixupCollection<SalesTerritory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSalesTerritories;
                    }
                    _salesTerritories = value;
                    var newValue = value as FixupCollection<SalesTerritory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSalesTerritories;
                    }
                }
            }
        }
        private ICollection<SalesTerritory> _salesTerritories;
    
        public virtual ICollection<StateProvince> StateProvinces
        {
            get
            {
                if (_stateProvinces == null)
                {
                    var newCollection = new FixupCollection<StateProvince>();
                    newCollection.CollectionChanged += FixupStateProvinces;
                    _stateProvinces = newCollection;
                }
                return _stateProvinces;
            }
            set
            {
                if (!ReferenceEquals(_stateProvinces, value))
                {
                    var previousValue = _stateProvinces as FixupCollection<StateProvince>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStateProvinces;
                    }
                    _stateProvinces = value;
                    var newValue = value as FixupCollection<StateProvince>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStateProvinces;
                    }
                }
            }
        }
        private ICollection<StateProvince> _stateProvinces;

        #endregion
        #region Association Fixup
    
        private void FixupCountryRegionCurrencies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CountryRegionCurrency item in e.NewItems)
                {
                    item.CountryRegion = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CountryRegionCurrency item in e.OldItems)
                {
                    if (ReferenceEquals(item.CountryRegion, this))
                    {
                        item.CountryRegion = null;
                    }
                }
            }
        }
    
        private void FixupSalesTerritories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SalesTerritory item in e.NewItems)
                {
                    item.CountryRegion = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalesTerritory item in e.OldItems)
                {
                    if (ReferenceEquals(item.CountryRegion, this))
                    {
                        item.CountryRegion = null;
                    }
                }
            }
        }
    
        private void FixupStateProvinces(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StateProvince item in e.NewItems)
                {
                    item.CountryRegion = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StateProvince item in e.OldItems)
                {
                    if (ReferenceEquals(item.CountryRegion, this))
                    {
                        item.CountryRegion = null;
                    }
                }
            }
        }

        #endregion
    }
}
